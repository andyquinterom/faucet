{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"faucet","text":"<p>Fast, Asynchronous, Concurrent R Application Deployment</p>"},{"location":"#overview","title":"Overview","text":"<p>Welcome to faucet, your high-performance solution for deploying Plumber APIs and Shiny Applications with speed and efficiency. faucet is a Rust-based server that offers Round Robin and IP Hash load balancing, ensuring seamless scaling and distribution of your R applications. Whether you're a data scientist, developer, or DevOps enthusiast, faucet simplifies deployment, making it easy to manage replicas and balance loads effectively.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>High Performance: faucet leverages Rust's speed for smooth and efficient execution of R applications.</li> <li>Load Balancing: Choose Round Robin or IP Hash load balancing for optimal resource utilization.</li> <li>Replicas: Scale Plumber APIs and Shiny Applications effortlessly with multiple replicas.</li> <li>Simplified Deployment: faucet streamlines the deployment process for quick setup.</li> <li>Asynchronous &amp; Concurrent: Utilizes asynchronous and concurrent processing for resource efficiency and responsive request handling.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>For installation options, refer to Installation.</p>"},{"location":"#usage","title":"Usage","text":"<p>For detailed usage instructions, refer to Getting Started.</p>"},{"location":"#with-docker","title":"With Docker","text":"<p>faucet is also available as a Docker image, for detailed usage instructions with Docker, refer to faucet in Containers.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#quick-start","title":"Quick Start","text":"<p>To use faucet, ensure that it is installed. If not, refer to the official installation documentation.</p> <p>Once installed, use the following command to start faucet with default settings:</p> <pre><code># Start faucet\nfaucet\n</code></pre> <p>faucet will bind to <code>127.0.0.1:3838</code> and automatically determine the number of worker threads based on the number of CPUs on the host machine.</p>"},{"location":"getting_started/#running-a-shiny-application","title":"Running a Shiny Application","text":"<p>Let's create a simple Shiny application and deploy it using faucet.</p> <ol> <li>Create a basic Shiny app named <code>app.R</code>:</li> </ol> <pre><code># app.R\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  shinyOutput(\"hello\")\n)\n\nserver &lt;- function(input, output) {\n  output$hello &lt;- renderText({\n    \"Hello, faucet!\"\n  })\n}\n\nshinyApp(ui, server)\n</code></pre> <ol> <li> <p>Save the above code in a file named <code>app.R</code>.</p> </li> <li> <p>Start faucet in the same directory as your Shiny app:</p> </li> </ol> <pre><code>faucet\n</code></pre> <p>faucet will automatically detect the Shiny app and deploy it.</p> <ol> <li>Open your web browser and navigate to http://127.0.0.1:3838 to see your Shiny app in action.</li> </ol>"},{"location":"getting_started/#adding-more-workers","title":"Adding more workers","text":"<p>If your computer has more than one CPU core, then you probably saw that many workers were created when you started faucet. This is because faucet automatically detects the number of CPU cores on your computer and creates a worker for each core.</p> <p>You can customize the number of workers by using the <code>--workers</code> flag:</p> <pre><code>faucet --workers 4\n</code></pre> <p>Or by setting the <code>FAUCET_WORKERS</code> environment variable:</p> <pre><code>export FAUCET_WORKERS=4\nfaucet\n</code></pre> <p>In both cases, faucet will create 4 workers on random available ports. Traffic will be load balanced across all workers according to the IP address of the incoming request. This means that if you have 4 workers, then you can handle 4 times as many concurrent requests as a single worker.</p>"},{"location":"getting_started/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have successfully started using faucet and deployed a basic Shiny application with many workers.</p> <p>Happy coding with faucet!</p>"},{"location":"in_containers/","title":"faucet in Containers (Docker)","text":"<p>Probably the easiest and most versatile way to deploy faucet is to build a Linux container image and run it in a container. This will allow you to run faucet on any Linux host that supports containers, like a laptop, a VM, or a server.</p>"},{"location":"in_containers/#build-a-docker-image-for-faucet","title":"Build a Docker Image for faucet","text":"<p>In this section, you will be using the available faucet + R image from the Docker Hub. You can however, build your own image if you want to. You should use the available installation instructions for your OS to install Docker.</p> <p>In order to properly build the faucet image, you will need to take the following steps into account:</p> <ol> <li>Install Docker on your host machine. You can find instructions    on how to do this for your specific OS in the    Docker Installation Guide.</li> <li>Take your R application dependencies into account. If you are    using R packages that require system dependencies, you will    need to install them in the Docker image. Also, take the R    and library versions into account, we highly recommend you    use renv.    For this tutorial we will assume you are using <code>renv</code> already.</li> <li>Ignore sensitive or unnecessary files. You can use a <code>.dockerignore</code>    file to ignore files that are not needed in the Docker image or    you can manually specify the files you want to include in the    image. In this case, we will use a <code>.dockerignore</code> file to ignore    said files.</li> </ol>"},{"location":"in_containers/#a-basic-shiny-app-or-plumber-api","title":"A basic Shiny app or Plumber API","text":"<p>In this section, you will bootstrap a basic Shiny app or Plumber API to use as an example. You can use your own app or API, but make sure you have <code>renv</code> initialized.</p>"},{"location":"in_containers/#shiny-app","title":"Shiny app","text":"<pre><code># app.R\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"obs\", \"Number of observations:\", min = 10, max = 500, value = 100)\n    ),\n    mainPanel(\n      plotOutput(\"distPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n</code></pre> <p>After saving the app, you can run it locally with:</p> <pre><code>shiny::runApp()\n</code></pre> <p>To make absolutely sure that <code>renv</code> detects all the packages used in the app, you should create a <code>dependencies.R</code> file with the following contents:</p> <pre><code># dependencies.R\nlibrary(shiny)\n</code></pre> <p>Now, you can initialize <code>renv</code> and install the packages:</p> <pre><code>renv::init()\nrenv::activate()\n</code></pre>"},{"location":"in_containers/#plumber-api","title":"Plumber API","text":"<pre><code># plumber.R\n#* @get /echo\nfunction(){\n  list(msg = \"Hello World!\")\n}\n</code></pre> <p>After saving the API, you can run it locally with:</p> <pre><code>library(plumber)\n# 'plumber.R' is the location of the file shown above\npr(\"plumber.R\") %&gt;%\n  pr_run()\n</code></pre> <p>To make absolutely sure that <code>renv</code> detects all the packages used in the API, you should create a <code>dependencies.R</code> file with the following contents:</p> <pre><code># dependencies.R\nlibrary(plumber)\n</code></pre> <p>Now, you can initialize <code>renv</code> and install the packages:</p> <pre><code>renv::init()\nrenv::activate()\n</code></pre>"},{"location":"in_containers/#dockerfile","title":"Dockerfile","text":""},{"location":"in_containers/#dockerignore","title":"Dockerignore","text":"<p>The first step to building our Docker image is to create a <code>.dockerignore</code> file in the root of our project. This file will contain the files that you want to ignore when building the Docker image. In this case, we will ignore the following <code>renv</code> files:</p> <pre><code>renv/library/\nrenv/local/\nrenv/cellar/\nrenv/lock/\nrenv/python/\nrenv/sandbox/\nrenv/staging/\n</code></pre> <p>If this were a real project, you would probably also ignore files like <code>.git</code>, <code>.Rproj.user</code>, <code>.DS_Store</code>, and sensitive files like <code>.env</code>, <code>.htpasswd</code>, etc.</p>"},{"location":"in_containers/#writing-the-dockerfile","title":"Writing the Dockerfile","text":"<p>The first step to building our Docker image is to create a <code>Dockerfile</code> in the root of our project. This file will contain the instructions to build our Docker image. In this case, you will use the <code>andyquinterom/faucet</code> image as our base image. This image is based on the <code>rocker/r-ver</code> image, which is a minimal R image based on Debian Linux.</p> <pre><code>FROM andyquinterom/faucet:0.3.1-r4.3\n\n# Some environment variables to tell `renv`\n# to install packages in the correct location\n# and without unnecessary symlinks\nENV RENV_CONFIG_CACHE_SYMLINKS FALSE\nENV RENV_PATHS_LIBRARY /srv/faucet/renv/library\n\n# You copy the necessary files to bootstrap `renv`\nCOPY ./renv.lock .\nCOPY ./renv ./renv\nCOPY ./.Rprofile .\n\n# You install the packages\nRUN Rscript -e \"renv::restore()\"\n\n# Copy the app/API files in this case replace\n# `app.R` with `plumber.R` if you are using a\n# Plumber API\nCOPY ./app.R .\n\n# You can run the container as a non-root user\n# for security reasons if we want to though\n# this is not necessary. You could ignore this\nRUN chown -R faucet:faucet /srv/faucet/\nUSER faucet\n</code></pre>"},{"location":"in_containers/#building-the-docker-image","title":"Building the Docker image","text":"<p>Now that you have a <code>Dockerfile</code> and a <code>.dockerignore</code> file, you can build the Docker image with the following command:</p> <pre><code>docker build -t my_faucet_app .\n</code></pre>"},{"location":"in_containers/#running-the-docker-image","title":"Running the Docker image","text":"<p>Once the image is built, you can run it with the following command:</p> <pre><code>docker run --rm -p 3838:3838 my_faucet_app\n</code></pre> <p>You can now access your app/API at <code>http://localhost:3838</code>.</p>"},{"location":"in_containers/#controlling-the-faucet-instance","title":"Controlling the faucet instance","text":"<p>You can control every aspect of the faucet instance by setting environment variables in the Docker container. For example, if you want to change the number of workers, you can do so by setting the <code>FAUCET_WORKERS</code> environment variable:</p> <pre><code>docker run --rm -p 3838:3838 -e FAUCET_WORKERS=4 my_faucet_app\n</code></pre> <p>If you are running the app/API behind a proxy like Nginx, you can set the <code>FAUCET_IP_FROM</code> environment variable to <code>x-real-ip</code> or <code>x-forwarded-for</code> to make sure faucet gets the correct IP address of the client.</p> <pre><code>docker run --rm -p 3838:3838 -e FAUCET_IP_FROM=x-real-ip my_faucet_app\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#option-1-binary-download-linux","title":"Option 1: Binary Download (Linux)","text":"<p>Download the latest release of faucet for Linux from the GitHub Releases page.</p> <pre><code>FAUCET_VERSION=\"v0.3.1\"\n\nwget https://github.com/andyquinterom/faucet/releases/download/$FAUCET_VERSION/faucet-x86_64-unknown-linux-musl -O faucet\n\n# Make the binary executable\nchmod +x faucet\n\n# Move the binary to a directory in your PATH (e.g., user local bin)\nmv faucet ~/.local/bin\n</code></pre> <p>Note: While the binary download is expected to work on most Linux distributions, compatibility is not guaranteed for all systems. If you encounter issues, consider using the Cargo installation or building from source options.</p>"},{"location":"install/#option-2-install-with-cargo-linux-macos-windows","title":"Option 2: Install with Cargo (Linux, macOS, Windows)","text":"<p>Install faucet with Cargo, Rust's package manager.</p> <ol> <li>Install Rust by following the instructions here.</li> </ol> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <ol> <li>Install faucet with Cargo.</li> </ol> <pre><code>cargo install faucet-server --version 0.3.1\n</code></pre>"},{"location":"install/#option-3-build-from-source-linux-macos-windows","title":"Option 3: Build from Source (Linux, macOS, Windows)","text":"<ol> <li>Install Rust by following the instructions here.</li> </ol> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <ol> <li>Clone the faucet repository.</li> </ol> <pre><code>git clone https://github.com/andyquinterom/faucet.git\n</code></pre> <ol> <li>Build faucet with Cargo.</li> </ol> <pre><code>cargo install --path .\n</code></pre>"},{"location":"es/","title":"faucet","text":"<p>Despliegue R\u00e1pido, Asincr\u00f3nico y Concurrente de Aplicaciones R</p>"},{"location":"es/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenido a faucet, tu soluci\u00f3n de alto rendimiento para desplegar APIs de Plumber y Aplicaciones Shiny con velocidad y eficiencia. faucet es un servidor basado en Rust que ofrece equilibrio de carga Round Robin e IP Hash, garantizando una escalabilidad y distribuci\u00f3n fluidas de tus aplicaciones R. Ya seas un cient\u00edfico de datos, desarrollador o entusiasta de DevOps, faucet simplifica el despliegue, facilitando la gesti\u00f3n de r\u00e9plicas y el equilibrio de cargas de manera efectiva.</p>"},{"location":"es/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Alto Rendimiento: faucet aprovecha la velocidad de Rust para una ejecuci\u00f3n suave y eficiente de las aplicaciones R.</li> <li>Equilibrio de Carga: Elige el equilibrio de carga Round Robin o IP Hash para una utilizaci\u00f3n \u00f3ptima de los recursos.</li> <li>R\u00e9plicas: Escala las APIs de Plumber y las Aplicaciones Shiny sin esfuerzo con m\u00faltiples r\u00e9plicas.</li> <li>Despliegue Simplificado: faucet simplifica el proceso de despliegue para una configuraci\u00f3n r\u00e1pida.</li> <li>Asincr\u00f3nico y Concurrente: Utiliza el procesamiento as\u00edncrono y concurrente para una eficiencia de recursos y una manipulaci\u00f3n de solicitudes receptiva.</li> </ul>"},{"location":"es/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para opciones de instalaci\u00f3n, consulta Instalaci\u00f3n.</p>"},{"location":"es/#uso","title":"Uso","text":"<p>Para instrucciones detalladas de uso, consulta C\u00f3mo Empezar.</p>"},{"location":"es/#con-docker-en-contenedores","title":"Con Docker / en Contenedores","text":"<p>faucet tambi\u00e9n est\u00e1 disponible como una imagen de Docker, para instrucciones detalladas de uso con Docker, consulta faucet en Contenedores.</p>"},{"location":"es/getting_started/","title":"Inicio R\u00e1pido","text":""},{"location":"es/getting_started/#inicio-rapido","title":"Inicio R\u00e1pido","text":"<p>Para usar faucet, aseg\u00farate de que est\u00e9 instalado. Si no lo est\u00e1, consulta la documentaci\u00f3n oficial de instalaci\u00f3n.</p> <p>Una vez instalado, utiliza el siguiente comando para iniciar faucet con la configuraci\u00f3n predeterminada:</p> <pre><code># Iniciar faucet\nfaucet\n</code></pre> <p>faucet se vincular\u00e1 a <code>127.0.0.1:3838</code> y determinar\u00e1 autom\u00e1ticamente el n\u00famero de hilos de trabajo seg\u00fan el n\u00famero de CPU en la m\u00e1quina host.</p>"},{"location":"es/getting_started/#ejecutar-una-aplicacion-shiny","title":"Ejecutar una Aplicaci\u00f3n Shiny","text":"<p>Creemos una aplicaci\u00f3n Shiny simple y despli\u00e9gala usando faucet.</p> <ol> <li>Crea una aplicaci\u00f3n Shiny b\u00e1sica llamada <code>app.R</code>:</li> </ol> <pre><code># app.R\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  shinyOutput(\"hello\")\n)\n\nserver &lt;- function(input, output) {\n  output$hello &lt;- renderText({\n    \"\u00a1Hola, faucet!\"\n  })\n}\n\nshinyApp(ui, server)\n</code></pre> <ol> <li> <p>Guarda el c\u00f3digo anterior en un archivo llamado <code>app.R</code>.</p> </li> <li> <p>Inicia faucet en el mismo directorio que tu aplicaci\u00f3n Shiny:</p> </li> </ol> <pre><code>faucet\n</code></pre> <p>faucet detectar\u00e1 autom\u00e1ticamente la aplicaci\u00f3n Shiny y la desplegar\u00e1.</p> <ol> <li>Abre tu navegador web y dir\u00edgete a http://127.0.0.1:3838 para ver tu aplicaci\u00f3n Shiny en acci\u00f3n.</li> </ol>"},{"location":"es/getting_started/#anadir-mas-trabajadores","title":"A\u00f1adir m\u00e1s trabajadores","text":"<p>Si tu computadora tiene m\u00e1s de un n\u00facleo de CPU, probablemente hayas visto que se crearon muchos trabajadores al iniciar faucet. Esto se debe a que faucet detecta autom\u00e1ticamente el n\u00famero de n\u00facleos de CPU en tu computadora y crea un trabajador por cada n\u00facleo.</p> <p>Puedes personalizar el n\u00famero de trabajadores utilizando la bandera <code>--workers</code>:</p> <pre><code>faucet --workers 4\n</code></pre> <p>O configurando la variable de entorno <code>FAUCET_WORKERS</code>:</p> <pre><code>export FAUCET_WORKERS=4\nfaucet\n</code></pre> <p>En ambos casos, faucet crear\u00e1 4 trabajadores en puertos aleatorios disponibles. El tr\u00e1fico se equilibrar\u00e1 entre todos los trabajadores seg\u00fan la direcci\u00f3n IP de la solicitud entrante. Esto significa que si tienes 4 trabajadores, podr\u00e1s manejar 4 veces m\u00e1s solicitudes concurrentes que un solo trabajador.</p>"},{"location":"es/getting_started/#conclusion","title":"Conclusi\u00f3n","text":"<p>\u00a1Felicidades! Has comenzado a usar faucet y desplegado una aplicaci\u00f3n Shiny b\u00e1sica con muchos trabajadores.</p> <p>\u00a1Feliz programaci\u00f3n con faucet!</p>"},{"location":"es/in_containers/","title":"faucet en Contenedores (Docker)","text":"<p>Probablemente la manera m\u00e1s f\u00e1cil y vers\u00e1til de implementar faucet es construir una imagen de contenedor Linux y ejecutarla en un contenedor. Esto le permitir\u00e1 ejecutar faucet en cualquier host de Linux que admita contenedores, como una computadora port\u00e1til, una m\u00e1quina virtual o un servidor.</p>"},{"location":"es/in_containers/#construir-una-imagen-de-docker-para-faucet","title":"Construir una Imagen de Docker para faucet","text":"<p>En esta secci\u00f3n, utilizar\u00e1s la imagen disponible de faucet + R desde Docker Hub. Sin embargo, tambi\u00e9n puedes construir tu propia imagen si lo deseas. Debes seguir las instrucciones de instalaci\u00f3n disponibles para tu sistema operativo para instalar Docker.</p> <p>Para construir correctamente la imagen de faucet, debes tener en cuenta los siguientes pasos:</p> <ol> <li>Instalar Docker en tu m\u00e1quina host. Puedes encontrar las instrucciones espec\u00edficas para tu sistema operativo en la Gu\u00eda de Instalaci\u00f3n de Docker.</li> <li>Considerar las dependencias de tu aplicaci\u00f3n en R. Si est\u00e1s utilizando paquetes R que requieren dependencias del sistema, deber\u00e1s instalarlas en la imagen de Docker. Tambi\u00e9n, ten en cuenta las versiones de R y las bibliotecas; te recomendamos utilizar renv. Para este tutorial, asumiremos que ya est\u00e1s utilizando <code>renv</code>.</li> <li>Ignorar archivos sensibles o innecesarios. Puedes utilizar un archivo <code>.dockerignore</code> para ignorar archivos que no son necesarios en la imagen de Docker, o puedes especificar manualmente los archivos que deseas incluir en la imagen. En este caso, utilizaremos un archivo <code>.dockerignore</code> para ignorar dichos archivos.</li> </ol>"},{"location":"es/in_containers/#una-aplicacion-basica-shiny-o-plumber-api","title":"Una aplicaci\u00f3n b\u00e1sica Shiny o Plumber API","text":"<p>En esta secci\u00f3n, arrancar\u00e1s una aplicaci\u00f3n Shiny b\u00e1sica o Plumber API para utilizar como ejemplo. Puedes usar tu propia aplicaci\u00f3n o API, pero aseg\u00farate de tener <code>renv</code> inicializado.</p>"},{"location":"es/in_containers/#aplicacion-shiny","title":"Aplicaci\u00f3n Shiny","text":"<pre><code># app.R\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  titlePanel(\"\u00a1Hola Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"obs\", \"N\u00famero de observaciones:\", min = 10, max = 500, value = 100)\n    ),\n    mainPanel(\n      plotOutput(\"distPlot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    hist(rnorm(input$obs))\n  })\n}\n\nshinyApp(ui = ui, server = server)\n</code></pre> <p>Despu\u00e9s de guardar la aplicaci\u00f3n, puedes ejecutarla localmente con:</p> <pre><code>shiny::runApp()\n</code></pre> <p>Para asegurarte de que <code>renv</code> detecte todos los paquetes utilizados en la aplicaci\u00f3n, debes crear un archivo <code>dependencies.R</code> con el siguiente contenido:</p> <pre><code># dependencies.R\nlibrary(shiny)\n</code></pre> <p>Ahora puedes inicializar <code>renv</code> e instalar los paquetes:</p> <pre><code>renv::init()\nrenv::activate()\n</code></pre>"},{"location":"es/in_containers/#plumber-api","title":"Plumber API","text":"<pre><code># plumber.R\n#* @get /echo\nfunction(){\n  list(msg = \"\u00a1Hola Mundo!\")\n}\n</code></pre> <p>Despu\u00e9s de guardar la API, puedes ejecutarla localmente con:</p> <pre><code>library(plumber)\n# 'plumber.R' es la ubicaci\u00f3n del archivo mostrado anteriormente\npr(\"plumber.R\") %&gt;%\n  pr_run()\n</code></pre> <p>Para asegurarte de que <code>renv</code> detecte todos los paquetes utilizados en la API, debes crear un archivo <code>dependencies.R</code> con el siguiente contenido:</p> <pre><code># dependencies.R\nlibrary(plumber)\n</code></pre> <p>Ahora puedes inicializar <code>renv</code> e instalar los paquetes:</p> <pre><code>renv::init()\nrenv::activate()\n</code></pre>"},{"location":"es/in_containers/#dockerignore","title":"Dockerignore","text":"<p>El primer paso para construir nuestra imagen de Docker es crear un archivo <code>.dockerignore</code> en la ra\u00edz de nuestro proyecto. Este archivo contendr\u00e1 los archivos que deseas ignorar al construir la imagen de Docker. En este caso, ignoraremos los siguientes archivos de <code>renv</code>:</p> <pre><code>renv/library/\nrenv/local/\nrenv/cellar/\nrenv/lock/\nrenv/python/\nrenv/sandbox/\nrenv/staging/\n</code></pre> <p>Si este fuera un proyecto real, probablemente tambi\u00e9n ignorar\u00edas archivos como <code>.git</code>, <code>.Rproj.user</code>, <code>.DS_Store</code> y archivos sensibles como <code>.env</code>, <code>.htpasswd</code>, etc.</p>"},{"location":"es/in_containers/#escribir-el-dockerfile","title":"Escribir el Dockerfile","text":"<p>El primer paso para construir nuestra imagen de Docker es crear un archivo <code>Dockerfile</code> en la ra\u00edz de nuestro proyecto. Este archivo contendr\u00e1 las instrucciones para construir nuestra imagen de Docker. En este caso, utilizar\u00e1s la imagen <code>andyquinterom/faucet</code> como base. Esta imagen se basa en la imagen <code>rocker/r-ver</code>, que es una imagen R m\u00ednima basada en Debian Linux.</p> <pre><code>FROM andyquinterom/faucet:0.3.1-r4.3\n\n# Algunas variables de entorno para indicar a `renv`\n# instalar paquetes en la ubicaci\u00f3n correcta\n# y sin enlaces simb\u00f3licos innecesarios\nENV RENV_CONFIG_CACHE_SYMLINKS FALSE\nENV RENV_PATHS_LIBRARY /srv/faucet/renv/library\n\n# Copias los archivos necesarios para arrancar `renv`\nCOPY ./renv.lock .\nCOPY ./renv ./renv\nCOPY ./.Rprofile .\n\n# Instalas los paquetes\nRUN Rscript -e \"renv::restore()\"\n\n# Copias los archivos de la aplicaci\u00f3n/API; en este caso,\n# reemplaza `app.R` con `plumber.R` si est\u00e1s utilizando\n# una Plumber API\nCOPY ./app.R .\n\n# Puedes ejecutar el contenedor como un usuario no root\n# por razones de seguridad, aunque esto no es necesario.\n# Puedes ignorar esto\nRUN chown -R faucet:faucet /srv/faucet/\nUSER faucet\n</code></pre>"},{"location":"es/in_containers/#construir-la-imagen-de-docker","title":"Construir la imagen de Docker","text":"<p>Ahora que tienes un <code>Dockerfile</code> y un archivo <code>.dockerignore</code>, puedes construir la imagen de Docker con el siguiente comando:</p> <pre><code>docker build -t my_faucet_app .\n</code></pre>"},{"location":"es/in_containers/#ejecutar-la-imagen-de-docker","title":"Ejecutar la imagen de Docker","text":"<p>Una vez construida la imagen, puedes ejecutarla con el siguiente comando:</p> <pre><code>docker run --rm -p 3838:3838 my_faucet_app\n</code></pre> <p>Ahora puedes acceder a tu aplicaci\u00f3n/API en <code>http://localhost:3838</code>.</p>"},{"location":"es/in_containers/#controlar-la-instancia-de-faucet","title":"Controlar la instancia de faucet","text":"<p>Puedes controlar todos los aspectos de la instancia de faucet configurando variables de entorno en el contenedor de Docker. Por ejemplo, si deseas cambiar el n\u00famero de trabajadores, puedes hacerlo configurando la variable de entorno <code>FAUCET_WORKERS</code>:</p> <pre><code>docker run --rm -p 3838:3838 -e FAUCET_WORKERS=4 my_faucet_app\n</code></pre> <p>Si est\u00e1s ejecutando la aplicaci\u00f3n/API detr\u00e1s de un proxy como Nginx, puedes configurar la variable de entorno <code>FAUCET_IP_FROM</code> en <code>x-real-ip</code> o <code>x-forwarded-for</code> para asegurarte de que faucet obtenga la direcci\u00f3n IP correcta del cliente.</p> <pre><code>docker run --rm -p 3838:3838 -e FAUCET_IP_FROM=x-real-ip my_faucet_app\n</code></pre>"},{"location":"es/install/","title":"Instalaci\u00f3n","text":""},{"location":"es/install/#opcion-1-descarga-del-binario-linux","title":"Opci\u00f3n 1: Descarga del Binario (Linux)","text":"<p>Descarga la \u00faltima versi\u00f3n de faucet para Linux desde la p\u00e1gina de lanzamientos en GitHub.</p> <pre><code>FAUCET_VERSION=\"v0.3.1\"\n\nwget https://github.com/andyquinterom/faucet/releases/download/$FAUCET_VERSION/faucet-x86_64-unknown-linux-musl -O faucet\n\n# Haz el binario ejecutable\nchmod +x faucet\n\n# Mueve el binario a un directorio en tu PATH (por ejemplo, el binario local del usuario)\nmv faucet ~/.local/bin\n</code></pre> <p>Nota: Aunque se espera que la descarga del binario funcione en la mayor\u00eda de las distribuciones de Linux, no se garantiza la compatibilidad con todos los sistemas. Si encuentras problemas, considera usar la instalaci\u00f3n con Cargo o las opciones de compilaci\u00f3n desde el origen.</p>"},{"location":"es/install/#opcion-2-instalacion-con-cargo-linux-macos-windows","title":"Opci\u00f3n 2: Instalaci\u00f3n con Cargo (Linux, macOS, Windows)","text":"<p>Instala faucet con Cargo, el gestor de paquetes de Rust.</p> <ol> <li>Instala Rust siguiendo las instrucciones aqu\u00ed.</li> </ol> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <ol> <li>Instala faucet con Cargo.</li> </ol> <pre><code>cargo install faucet-server --version 0.3.1\n</code></pre>"},{"location":"es/install/#opcion-3-compilar-desde-el-codigo-fuente-linux-macos-windows","title":"Opci\u00f3n 3: Compilar desde el C\u00f3digo Fuente (Linux, macOS, Windows)","text":"<ol> <li>Instala Rust siguiendo las instrucciones aqu\u00ed.</li> </ol> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <ol> <li>Clona el repositorio de faucet.</li> </ol> <pre><code>git clone https://github.com/andyquinterom/faucet.git\n</code></pre> <ol> <li>Compila faucet con Cargo.</li> </ol> <pre><code>cargo install --path .\n</code></pre>"}]}